import React, { useRef, useState, useEffect } from 'react';
import { useStateValue } from '../content/StateProvider';
import { actionType } from '../content/reducer';
import { FaCircleArrowUp, FaGlobe } from "react-icons/fa6";
import { BsFillRecordCircleFill } from "react-icons/bs";
import { callOpenAILib, callCommand, longTimeMemory, processMemory } from '../utlis/openai';

export const ChatboxInputBox = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [agentActive, setAgentActive] = useState(false); // Agent ÂºÄÂÖ≥

  const toggleAgent = () => {
    setAgentActive(prev => !prev);
    console.log(!agentActive ? "Agent Â∑≤ÂêØÂä®" : "Agent Â∑≤ÂÖ≥Èó≠");
  };

  const inputRef = useRef(null);
  const [{ userText, userMessages }, dispatch] = useStateValue();
  const [characterId, setCharacterId] = useState(null);
  const [petInfo, setPetInfo] = useState(null);
  const composingRef = useRef(false);
  const ignoreEnterRef = useRef(false);
  const conversationIdRef = useRef(null);
  const [userMemory, setUserMemory] = useState(null)

  // ÂêØÂä®Êó∂Âä†ËΩΩÈªòËÆ§ËßíËâ≤ID
  useEffect(() => {
    const loadDefaultCharacter = async () => {
      try {
        const settings = await window.electron.getSettings();
        if (settings && settings.defaultRoleId) {
          console.log("üìö Loading default character ID from settings:", settings.defaultRoleId);
          
          // È™åËØÅIDÊòØÂê¶ÊúâÊïàÔºàÊòØÂê¶ËÉΩÊâæÂà∞ÂØπÂ∫îÁöÑpetÊï∞ÊçÆÔºâ
          try {
            const pet = await window.electron.getPet(settings.defaultRoleId);
            if (pet) {
              setCharacterId(settings.defaultRoleId);
              console.log("Default character ID validated successfully");
            } else {
              console.log("Default character ID not found in database, using null");
              setCharacterId(null);
            }
          } catch (petError) {
            console.error("Error finding pet with default ID:", petError);
            setCharacterId(null);
          }
        }
      } catch (error) {
        console.error("Error loading default character ID from settings:", error);
        setCharacterId(null);
      }
    };
    
    loadDefaultCharacter();
  }, []); // Âè™Âú®ÁªÑ‰ª∂Âä†ËΩΩÊó∂ÊâßË°å‰∏ÄÊ¨°

  // ÁõëÂê¨ËßíËâ≤ ID
  useEffect(() => {
    const handleCharacterId = (id) => {
      console.log("üì© Received character ID:", id);
      setCharacterId(id);
    };
    window.electron?.onCharacterId(handleCharacterId);
  }, []);

  // Âä†ËΩΩËßíËâ≤‰ø°ÊÅØÔºåÂπ∂Ê∏ÖÁêÜÊàñ‰øùÁïôÂØπËØùÂéÜÂè≤
  useEffect(() => {
    if (!characterId) return;

    const fetchPetInfo = async () => {
      try {
        const pet = await window.electron.getPet(characterId);
        if (pet) {
          const { _id, name, modelName, personality, modelApiKey, modelProvider, modelUrl } = pet;
          setPetInfo({ _id, name, modelName, personality, modelApiKey, modelProvider, modelUrl });
          try {
            const memoryJson = await window.electron.getPetUserMemory(characterId);
            const memory = JSON.stringify(memoryJson);
            const getUserMemory = await processMemory(
              memory,
              modelProvider, // Áõ¥Êé•‰ΩøÁî®‰ªépetËé∑ÂèñÁöÑÂÄº
              modelApiKey,
              modelName,
              modelUrl
            );
            setUserMemory(getUserMemory);
            // alert(getUserMemory);
          } catch (memoryError) {
            console.error("Âä†ËΩΩÁî®Êà∑ËÆ∞ÂøÜÂ§±Ë¥•:", memoryError);
          }
        } else {
          // Â¶ÇÊûúÊâæ‰∏çÂà∞ÂØπÂ∫îÁöÑÂÆ†Áâ©Êï∞ÊçÆÔºåÂ∞ÜcharacterIdËÆæ‰∏∫null
          console.error("Pet not found for ID:", characterId);
          setCharacterId(null);
          return;
        }

        if (conversationIdRef.current) {
          const currentConv = await window.electron.getConversationById(conversationIdRef.current);
          if (!currentConv || currentConv.petId !== characterId) {
            dispatch({ type: actionType.SET_MESSAGE, userMessages: [] });
            conversationIdRef.current = null;
          }
        } else {
          dispatch({ type: actionType.SET_MESSAGE, userMessages: [] });
        }
      } catch (error) {
        console.error("Error fetching pet info:", error);
        // Âá∫ÈîôÊó∂Â∞ÜcharacterIdËÆæ‰∏∫null
        setCharacterId(null);
        // alert("Failed to load character info");
      }
    };

    fetchPetInfo();
  }, [characterId]);

  // Êé•Êî∂‰ºöËØù ID
  useEffect(() => {
    const handleConversationId = (id) => {
      console.log("üì• Received conversation ID from Electron:", id);
      conversationIdRef.current = id;
    };

    if (window.electron?.onConversationId) {
      window.electron.onConversationId(handleConversationId);
    }
  }, []);

  const handleChange = (e) => {
    dispatch({
      type: actionType.SET_USER_TEXT,
      userText: e.target.value,
    });
  };

  // ‰∏≠Êñá/Êó•ÊñáËæìÂÖ•Ê≥ï‰∫ã‰ª∂
  const handleCompositionStart = () => {
    composingRef.current = true;
  };
  const handleCompositionEnd = () => {
    composingRef.current = false;
    ignoreEnterRef.current = true;
    setTimeout(() => {
      ignoreEnterRef.current = false;
    }, 150);
  };

  // Ëá™Âä®Ë∞ÉÊï¥ textarea È´òÂ∫¶ÔºàÊúÄÂ§ß200pxÔºâ
  const autoResize = () => {
    if (inputRef.current) {
      inputRef.current.style.height = 'auto';
      const newHeight = Math.min(inputRef.current.scrollHeight, 200);
      inputRef.current.style.height = newHeight + 'px';
    }
  };

  // ÂõûËΩ¶ÂèëÈÄÅ
  const handleKeyDown = (e) => {
    if (composingRef.current || ignoreEnterRef.current) return;
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  // ÂèëÈÄÅÊ∂àÊÅØ
  const handleSend = async () => {

    if (!characterId) {
      alert("Please select a character first!");
      return;
    }
    setIsGenerating(true);
    if (!userText.trim()) return;

    window.electron?.sendMoodUpdate('thinking');

    if (inputRef.current) {
      inputRef.current.value = "";
      inputRef.current.style.height = 'auto'; // ÈáçÁΩÆ‰∏∫ÂàùÂßãÈ´òÂ∫¶
    }

    // Âà§Êñ≠ÊòØÂê¶‰∏∫ÈªòËÆ§‰∫∫Ê†º
    const isDefaultPersonality = petInfo?.personality &&
      (petInfo.personality.trim().toLowerCase() === "default model (english)" ||
       petInfo.personality.trim().toLowerCase() === "default");

    let fullMessages = [];
    if(agentActive) {
      fullMessages = [...userMessages, { role: "user", content: userText }];
    } else {
      
      
      if (!isDefaultPersonality) {
        const index = await longTimeMemory(userText, 
          petInfo.modelProvider,
          petInfo.modelApiKey,
          petInfo.modelName,
          petInfo.modelUrl
        )
        if(index.isImportant == true) {
          await window.electron.updatePetUserMemory(petInfo._id, index.key, index.value);
          const memoryJson = await window.electron.getPetUserMemory(petInfo._id);
          const memory = JSON.stringify(memoryJson);
          const getUserMemory = await processMemory(
            memory,
            petInfo.modelProvider,
            petInfo.modelApiKey,
            petInfo.modelName,
            petInfo.modelUrl
          );
          await setUserMemory(getUserMemory);
          // alert(getUserMemory);
        }

        let systemContent = `‰Ω†Áé∞Âú®ÊâÆÊºîÁöÑËßíËâ≤ËÆæÂÆöÂ¶Ç‰∏ãÔºö\n${petInfo?.personality}\n 
        ÂÖ≥‰∫éÁî®Êà∑ÁöÑ‰ø°ÊÅØËÆæÂÆöÂ¶Ç‰∏ã:\n${userMemory}\n`;
        if (petInfo.isAgent) {
          systemContent += "ËØ∑Âú®ÂõûÁ≠î‰∏≠‰øùÊåÅËßíËâ≤ÁâπÁÇπÂíåÁî®Êà∑ËÆæÂÆöÔºåÁîüÊàêÂõûÂ§çÂÜÖÂÆπ„ÄÇ";
        } else {
          systemContent += "ËØ∑Âú®ÂõûÁ≠î‰∏≠‰øùÊåÅËßíËâ≤ÁâπÁÇπÂíåÁî®Êà∑ËÆæÂÆöÔºåÂêåÊó∂ÁîüÊàêÂõûÂ§çÂÜÖÂÆπÂíåÊÉÖÁª™(mood: angry, smile, normal)";
        }
        const systemPrompt = { role: "system", content: systemContent };
        fullMessages = [...userMessages, systemPrompt, { role: "user", content: userText }];
      } else {
        fullMessages = [...userMessages, { role: "user", content: userText }];
      }
    }

    let reply = null;

    if(agentActive) {
      reply = await callCommand(
        fullMessages,
        petInfo.modelProvider,
        petInfo.modelApiKey,
        petInfo.modelName,
        petInfo.modelUrl
      )
      const commands = reply.excution || '';  // ‰Ω†ÁöÑÂ§öË°åÂëΩ‰ª§

      // ËΩ¨‰πâË¶Å‰º†Áªô Terminal ÁöÑ Shell ÂëΩ‰ª§ÔºàÂú® do script "..." ÈáåÔºâ:
      function escapeShellCommand(cmd) {
        // ÁßªÈô§Â§ö‰ΩôÁöÑ Markdown ‰ª£Á†ÅÂùóÊ†áËÆ∞
        let cleaned = cmd
          .replace(/^```(?:bash|shell)\n/, '')
          .replace(/\n```$/, '');

        // ‰ªÖËΩ¨‰πâÂèçÊñúÊù†„ÄÅÂèåÂºïÂè∑ÂíåÂèçÂºïÂè∑Ôºå‰∏çÂØπÁæéÂÖÉÁ¨¶Âè∑ËøõË°åËΩ¨‰πâ
        cleaned = cleaned
          .replace(/\\/g, '\\\\')    // ÂèçÊñúÊù† -> ÂèåÂèçÊñúÊù†
          .replace(/"/g, '\\"')       // ÂèåÂºïÂè∑ -> \"
          .replace(/`/g, '\\`');      // ÂèçÂºïÂè∑ -> \\\`
        
        return cleaned;
      }

      // ËΩ¨‰πâ AppleScript ÁöÑÂ§ñÂ±ÇÂ≠óÁ¨¶‰∏≤
      function escapeForAppleScript(str) {
        return str.replace(/'/g, "'\\''");
        // /'/g, "'\\''"
      }

      // ÁîüÊàê AppleScript ÂëΩ‰ª§
      const shellCmdEscaped = escapeShellCommand(commands);
      const appleScriptCode = `
      tell application "Terminal"
        if (count of windows) = 0 then
          do script "${shellCmdEscaped}"
        else
          do script "${shellCmdEscaped}" in front window
        end if
      end tell
      `;
      const appleScriptEscaped = escapeForAppleScript(appleScriptCode);
      const osascriptCmd = `osascript -e '${appleScriptEscaped}'`;

      window.electron?.testOpen(osascriptCmd);

    } else {
      reply = await callOpenAILib(
        fullMessages,
        petInfo.modelProvider,
        petInfo.modelApiKey,
        petInfo.modelName,
        petInfo.modelUrl
      );
    }

    const botReply = { role: "assistant", content: reply.content };

    dispatch({ type: actionType.ADD_MESSAGE, message: { role: "user", content: userText } });
    dispatch({ type: actionType.ADD_MESSAGE, message: botReply });

    if (!conversationIdRef.current) {
      try {
        const newConversation = await window.electron.createConversation({
          petId: petInfo._id,
          title: `${userText} with ${petInfo.name}`,
          history: [...userMessages, { role: "user", content: userText }, botReply],
        });
        conversationIdRef.current = newConversation._id;
      } catch (error) {
        console.error("Failed to create conversation:", error);
      }
    }

    await window.electron.updateConversation(conversationIdRef.current, {
      petId: petInfo._id,
      title: `${userText} with ${petInfo.name}`,
      history: [...userMessages, { role: "user", content: userText }, botReply],
    });

    dispatch({ type: actionType.SET_USER_TEXT, userText: "" });
    window.electron?.sendMoodUpdate(reply.mood);
    setIsGenerating(false);
  };

  return (
    <div className="relative w-full">
      {/* ‰∏ªÂÆπÂô®ÔºöÂåÖÂê´ËæìÂÖ•Ê°ÜÂíå Agent ÂàáÊç¢ÊåâÈíÆ */}
      <div className="bg-[rgba(220,220,230,0.9)] border-gray-300 rounded-3xl border-2 p-3 text-gray-800">
        <textarea
          ref={inputRef}
          onKeyDown={handleKeyDown}
          onCompositionStart={handleCompositionStart}
          onCompositionEnd={handleCompositionEnd}
          onInput={autoResize}
          placeholder="Message PetGPT"
          className="w-full bg-transparent outline-none resize-none"
          onChange={handleChange}
          style={{ height: 'auto', maxHeight: '200px', overflow: 'auto' }}
        />
        {/* ‰øùÁïôÁ¨¨‰∏ÄÁâàÁöÑ Agent UI */}
        <div className="flex justify-between">
          <button
            onClick={toggleAgent}
            className="border-none flex items-center space-x-1 px-3 py-1 rounded-md border border-gray-300"
          >
            <FaGlobe className={`w-5 h-5 ${agentActive ? 'text-green-500' : 'text-gray-600'}`} />
            <span className="text-sm">{agentActive ? "Agent On" : "Agent Off"}</span>
          </button>
        </div>
      </div>

      {/* ÂèëÈÄÅÊåâÈíÆÔºöÈááÁî®ÂêéÁª≠ÁªôÂá∫ÁöÑ UIÔºåÁªùÂØπÂÆö‰Ωç‰∫éÂè≥‰∏ãËßí */}
      <button
        onClick={handleSend}
        disabled={!String(userText).trim() || isGenerating}
        className="absolute bottom-2 right-2 rounded-full"
      >
        {!isGenerating ? (
          <FaCircleArrowUp
            className="w-9 h-9"
            style={{ color: !String(userText).trim() ? "#c1c1c1" : "#000000" }}
          />
        ) : (
          <BsFillRecordCircleFill
            className="w-9 h-9"
            style={{ color: "#000000" }}
          />
        )}
      </button>
    </div>
  );
};

export default ChatboxInputBox;